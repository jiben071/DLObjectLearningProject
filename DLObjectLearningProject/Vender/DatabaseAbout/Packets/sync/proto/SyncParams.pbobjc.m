// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_params.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif


 #import "SyncParams.pbobjc.h"
 #import "SyncFiles.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SyncParamsRoot

@implementation SyncParamsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SyncParamsRoot_FileDescriptor

static GPBFileDescriptor *SyncParamsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sync"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AddRequest

@implementation AddRequest

@dynamic seqId;
@dynamic hasData_p, data_p;

typedef struct AddRequest__storage_ {
  uint32_t _has_storage_[1];
  MetaData *data_p;
  int64_t seqId;
} AddRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seqId",
        .dataTypeSpecific.className = NULL,
        .number = AddRequest_FieldNumber_SeqId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddRequest__storage_, seqId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(MetaData),
        .number = AddRequest_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddRequest__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddRequest class]
                                     rootClass:[SyncParamsRoot class]
                                          file:SyncParamsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PullRequest

@implementation PullRequest

@dynamic seqId;
@dynamic lastServerUuid;
@dynamic clientDataVersion;
@dynamic context;
@dynamic pageSize;

typedef struct PullRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageSize;
  NSString *lastServerUuid;
  NSData *context;
  int64_t seqId;
  int64_t clientDataVersion;
} PullRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seqId",
        .dataTypeSpecific.className = NULL,
        .number = PullRequest_FieldNumber_SeqId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PullRequest__storage_, seqId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lastServerUuid",
        .dataTypeSpecific.className = NULL,
        .number = PullRequest_FieldNumber_LastServerUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PullRequest__storage_, lastServerUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientDataVersion",
        .dataTypeSpecific.className = NULL,
        .number = PullRequest_FieldNumber_ClientDataVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PullRequest__storage_, clientDataVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "context",
        .dataTypeSpecific.className = NULL,
        .number = PullRequest_FieldNumber_Context,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PullRequest__storage_, context),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = PullRequest_FieldNumber_PageSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PullRequest__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PullRequest class]
                                     rootClass:[SyncParamsRoot class]
                                          file:SyncParamsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PullRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PullResponse

@implementation PullResponse

@dynamic seqId;
@dynamic serverUuid;
@dynamic serverDataVersion;
@dynamic mode;
@dynamic dataArray, dataArray_Count;
@dynamic context;
@dynamic totalSize;
@dynamic hasNext;
@dynamic code;

typedef struct PullResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t totalSize;
  int32_t code;
  NSString *serverUuid;
  NSString *mode;
  NSMutableArray *dataArray;
  NSData *context;
  int64_t seqId;
  int64_t serverDataVersion;
} PullResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seqId",
        .dataTypeSpecific.className = NULL,
        .number = PullResponse_FieldNumber_SeqId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PullResponse__storage_, seqId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "serverUuid",
        .dataTypeSpecific.className = NULL,
        .number = PullResponse_FieldNumber_ServerUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PullResponse__storage_, serverUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serverDataVersion",
        .dataTypeSpecific.className = NULL,
        .number = PullResponse_FieldNumber_ServerDataVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PullResponse__storage_, serverDataVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mode",
        .dataTypeSpecific.className = NULL,
        .number = PullResponse_FieldNumber_Mode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PullResponse__storage_, mode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MetaData),
        .number = PullResponse_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PullResponse__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "context",
        .dataTypeSpecific.className = NULL,
        .number = PullResponse_FieldNumber_Context,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PullResponse__storage_, context),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "totalSize",
        .dataTypeSpecific.className = NULL,
        .number = PullResponse_FieldNumber_TotalSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PullResponse__storage_, totalSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hasNext",
        .dataTypeSpecific.className = NULL,
        .number = PullResponse_FieldNumber_HasNext,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PullResponse_FieldNumber_Code,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PullResponse__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PullResponse class]
                                     rootClass:[SyncParamsRoot class]
                                          file:SyncParamsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PullResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PushRequest

@implementation PushRequest

@dynamic seqId;
@dynamic operateArray, operateArray_Count;

typedef struct PushRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *operateArray;
  int64_t seqId;
} PushRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seqId",
        .dataTypeSpecific.className = NULL,
        .number = PushRequest_FieldNumber_SeqId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushRequest__storage_, seqId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "operateArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ModifyData),
        .number = PushRequest_FieldNumber_OperateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PushRequest__storage_, operateArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushRequest class]
                                     rootClass:[SyncParamsRoot class]
                                          file:SyncParamsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PushResponse

@implementation PushResponse

@dynamic seqId;
@dynamic code;

typedef struct PushResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  int64_t seqId;
} PushResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seqId",
        .dataTypeSpecific.className = NULL,
        .number = PushResponse_FieldNumber_SeqId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushResponse__storage_, seqId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PushResponse_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PushResponse__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushResponse class]
                                     rootClass:[SyncParamsRoot class]
                                          file:SyncParamsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
