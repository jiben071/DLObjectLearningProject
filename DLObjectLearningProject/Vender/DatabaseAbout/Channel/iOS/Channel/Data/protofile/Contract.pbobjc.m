// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Contract.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ContractRoot

@implementation ContractRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ContractRoot_FileDescriptor

static GPBFileDescriptor *ContractRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"packethub"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Method_Enum

GPBEnumDescriptor *Method_Enum_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Get\000Post\000Put\000Patch\000Delete\000";
    static const int32_t values[] = {
        Method_Enum_Get,
        Method_Enum_Post,
        Method_Enum_Put,
        Method_Enum_Patch,
        Method_Enum_Delete,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Method_Enum)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Method_Enum_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Method_Enum_IsValidValue(int32_t value__) {
  switch (value__) {
    case Method_Enum_Get:
    case Method_Enum_Post:
    case Method_Enum_Put:
    case Method_Enum_Patch:
    case Method_Enum_Delete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Event

@implementation Event

@dynamic id_p;
@dynamic endpoint;
@dynamic action;
@dynamic subAction;
@dynamic when;
@dynamic hasParam, param;

typedef struct Event__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *endpoint;
  NSString *action;
  NSString *subAction;
  GPBAny *param;
  int64_t when;
} Event__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Event_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Event__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endpoint",
        .dataTypeSpecific.className = NULL,
        .number = Event_FieldNumber_Endpoint,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Event__storage_, endpoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "action",
        .dataTypeSpecific.className = NULL,
        .number = Event_FieldNumber_Action,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Event__storage_, action),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subAction",
        .dataTypeSpecific.className = NULL,
        .number = Event_FieldNumber_SubAction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Event__storage_, subAction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "when",
        .dataTypeSpecific.className = NULL,
        .number = Event_FieldNumber_When,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Event__storage_, when),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "param",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = Event_FieldNumber_Param,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Event__storage_, param),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Request

@implementation Request

@dynamic id_p;
@dynamic endpoint;
@dynamic uri;
@dynamic method;
@dynamic when;
@dynamic hasParam, param;

typedef struct Request__storage_ {
  uint32_t _has_storage_[1];
  Method_Enum method;
  NSString *id_p;
  NSString *endpoint;
  NSString *uri;
  GPBAny *param;
  int64_t when;
} Request__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Request__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endpoint",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_Endpoint,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Request__storage_, endpoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uri",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_Uri,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Request__storage_, uri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "method",
        .dataTypeSpecific.enumDescFunc = Method_Enum_EnumDescriptor,
        .number = Request_FieldNumber_Method,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Request__storage_, method),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "when",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_When,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Request__storage_, when),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "param",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = Request_FieldNumber_Param,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Request__storage_, param),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Request class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Request__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Request_Method_RawValue(Request *message) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_Method];
  return GPBGetMessageInt32Field(message, field);
}

void SetRequest_Method_RawValue(Request *message, int32_t value) {
  GPBDescriptor *descriptor = [Request descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Request_FieldNumber_Method];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Response

@implementation Response

@dynamic status;
@dynamic id_p;
@dynamic reqId;
@dynamic endpoint;
@dynamic reqEndpoint;
@dynamic uri;
@dynamic method;
@dynamic when;
@dynamic hasParam, param;

typedef struct Response__storage_ {
  uint32_t _has_storage_[1];
  Response_Status status;
  Method_Enum method;
  NSString *id_p;
  NSString *reqId;
  NSString *endpoint;
  NSString *reqEndpoint;
  NSString *uri;
  GPBAny *param;
  int64_t when;
} Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = Response_Status_EnumDescriptor,
        .number = Response_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Response__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Response__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reqId",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_ReqId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Response__storage_, reqId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endpoint",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_Endpoint,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Response__storage_, endpoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reqEndpoint",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_ReqEndpoint,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Response__storage_, reqEndpoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uri",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_Uri,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Response__storage_, uri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "method",
        .dataTypeSpecific.enumDescFunc = Method_Enum_EnumDescriptor,
        .number = Response_FieldNumber_Method,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Response__storage_, method),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "when",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_When,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Response__storage_, when),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "param",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = Response_FieldNumber_Param,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Response__storage_, param),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Response class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Response__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Response_Status_RawValue(Response *message) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetResponse_Status_RawValue(Response *message, int32_t value) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Response_Method_RawValue(Response *message) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_Method];
  return GPBGetMessageInt32Field(message, field);
}

void SetResponse_Method_RawValue(Response *message, int32_t value) {
  GPBDescriptor *descriptor = [Response descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Response_FieldNumber_Method];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Response_Status

GPBEnumDescriptor *Response_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Undefined\000StatusOk\000StatusCreated\000StatusN"
        "oContent\000StatusBadRequest\000StatusUnauthor"
        "ized\000StatusForbidden\000StatusNotFound\000Stat"
        "usMethodNotAllowed\000StatusInternalServere"
        "rror\000StatusNotImplemented\000StatusBadGatew"
        "ay\000StatusServiceUnavailable\000StatusGatewa"
        "yTimeout\000";
    static const int32_t values[] = {
        Response_Status_Undefined,
        Response_Status_StatusOk,
        Response_Status_StatusCreated,
        Response_Status_StatusNoContent,
        Response_Status_StatusBadRequest,
        Response_Status_StatusUnauthorized,
        Response_Status_StatusForbidden,
        Response_Status_StatusNotFound,
        Response_Status_StatusMethodNotAllowed,
        Response_Status_StatusInternalServererror,
        Response_Status_StatusNotImplemented,
        Response_Status_StatusBadGateway,
        Response_Status_StatusServiceUnavailable,
        Response_Status_StatusGatewayTimeout,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Response_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Response_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Response_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case Response_Status_Undefined:
    case Response_Status_StatusOk:
    case Response_Status_StatusCreated:
    case Response_Status_StatusNoContent:
    case Response_Status_StatusBadRequest:
    case Response_Status_StatusUnauthorized:
    case Response_Status_StatusForbidden:
    case Response_Status_StatusNotFound:
    case Response_Status_StatusMethodNotAllowed:
    case Response_Status_StatusInternalServererror:
    case Response_Status_StatusNotImplemented:
    case Response_Status_StatusBadGateway:
    case Response_Status_StatusServiceUnavailable:
    case Response_Status_StatusGatewayTimeout:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Error

@implementation Error

@dynamic code;
@dynamic message;
@dynamic detail;

typedef struct Error__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *message;
  NSString *detail;
} Error__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = Error_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Error__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = Error_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Error__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "detail",
        .dataTypeSpecific.className = NULL,
        .number = Error_FieldNumber_Detail,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Error__storage_, detail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Error class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Error__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
