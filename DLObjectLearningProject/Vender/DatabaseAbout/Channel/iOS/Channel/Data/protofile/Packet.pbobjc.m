// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif


 #import "Packet.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PacketRoot

@implementation PacketRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PacketRoot_FileDescriptor

static GPBFileDescriptor *PacketRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"packet"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Header

@implementation Header

@dynamic id_p;
@dynamic endpoint;
@dynamic when;
@dynamic version;
@dynamic bodyType;

typedef struct Header__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *endpoint;
  NSString *version;
  NSString *bodyType;
  int64_t when;
} Header__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Header_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Header__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endpoint",
        .dataTypeSpecific.className = NULL,
        .number = Header_FieldNumber_Endpoint,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Header__storage_, endpoint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "when",
        .dataTypeSpecific.className = NULL,
        .number = Header_FieldNumber_When,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Header__storage_, when),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = Header_FieldNumber_Version,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Header__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bodyType",
        .dataTypeSpecific.className = NULL,
        .number = Header_FieldNumber_BodyType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Header__storage_, bodyType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Header class]
                                     rootClass:[PacketRoot class]
                                          file:PacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Header__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Packet

@implementation Packet

@dynamic hasHeader, header;
@dynamic hasBody, body;

typedef struct Packet__storage_ {
  uint32_t _has_storage_[1];
  Header *header;
  GPBAny *body;
} Packet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "header",
        .dataTypeSpecific.className = GPBStringifySymbol(Header),
        .number = Packet_FieldNumber_Header,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Packet__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = Packet_FieldNumber_Body,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Packet__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Packet class]
                                     rootClass:[PacketRoot class]
                                          file:PacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Packet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
