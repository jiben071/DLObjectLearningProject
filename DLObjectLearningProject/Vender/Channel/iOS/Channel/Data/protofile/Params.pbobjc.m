// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: params.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Params.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ParamsRoot

@implementation ParamsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ParamsRoot_FileDescriptor

static GPBFileDescriptor *ParamsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"discover"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DiscoverParam

@implementation DiscoverParam

@dynamic discoverHost;
@dynamic discoverPort;
@dynamic broadcast;

typedef struct DiscoverParam__storage_ {
  uint32_t _has_storage_[1];
  int32_t discoverPort;
  NSString *discoverHost;
  NSString *broadcast;
} DiscoverParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "discoverHost",
        .dataTypeSpecific.className = NULL,
        .number = DiscoverParam_FieldNumber_DiscoverHost,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DiscoverParam__storage_, discoverHost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "discoverPort",
        .dataTypeSpecific.className = NULL,
        .number = DiscoverParam_FieldNumber_DiscoverPort,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DiscoverParam__storage_, discoverPort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "broadcast",
        .dataTypeSpecific.className = NULL,
        .number = DiscoverParam_FieldNumber_Broadcast,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DiscoverParam__storage_, broadcast),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DiscoverParam class]
                                     rootClass:[ParamsRoot class]
                                          file:ParamsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DiscoverParam__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\014\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DiscoveredParam

@implementation DiscoveredParam

@dynamic discoverEventId;
@dynamic packetHubHost;
@dynamic packetHubPort;
@dynamic packetHubName;

typedef struct DiscoveredParam__storage_ {
  uint32_t _has_storage_[1];
  int32_t packetHubPort;
  NSString *discoverEventId;
  NSString *packetHubHost;
  NSString *packetHubName;
} DiscoveredParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "discoverEventId",
        .dataTypeSpecific.className = NULL,
        .number = DiscoveredParam_FieldNumber_DiscoverEventId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DiscoveredParam__storage_, discoverEventId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packetHubHost",
        .dataTypeSpecific.className = NULL,
        .number = DiscoveredParam_FieldNumber_PacketHubHost,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DiscoveredParam__storage_, packetHubHost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "packetHubPort",
        .dataTypeSpecific.className = NULL,
        .number = DiscoveredParam_FieldNumber_PacketHubPort,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DiscoveredParam__storage_, packetHubPort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "packetHubName",
        .dataTypeSpecific.className = NULL,
        .number = DiscoveredParam_FieldNumber_PacketHubName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DiscoveredParam__storage_, packetHubName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DiscoveredParam class]
                                     rootClass:[ParamsRoot class]
                                          file:ParamsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DiscoveredParam__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\017\000\002\r\000\003\r\000\004\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
